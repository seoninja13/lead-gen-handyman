# Handyman Lead Generation - Project Rules

## 1. Development Guidelines

## Project Overview
We're developing a Next.js 14 application that connects customers with trusted handyman services in their area. The application is using the Envato template as its UI foundation, which needs to be adapted from a real estate template to handyman services.
s
## Key Requirements
- **Main Application UI**: The home page should display the main application UI based on the Envato template, not a testing dashboard
- **Testing Isolation**: All testing functionality should be isolated to the `/test` route
- **SEO Optimization**: The URL structure follows a city-specific, service-oriented pattern (e.g., `/emergency-plumbing-repair-sacramento-ca`)
- **Data Management**: Uses Supabase for data storage and Google Places API for location services

## Current Issue
The current home page is showing a simple dashboard with testing tools instead of the proper Envato template UI for handyman services. We need to use the original Envato template structure but adapted for handyman services.

- Do not delete files unrelated to the current task
- Install dependencies automatically without asking for permission
- Update tracking-progress.md when implementing new features
- Use semicolons (;) instead of && when joining commands
- Before creating new files/folders, check if they already exist
- Preserve existing layouts and CSS properties when replacing images
- Use heavily commented code for better readability and maintenance
- Execute all necessary commands automatically without asking

## 2. Tech Stack and Architecture

- **Framework**: Next.js 14 with App Router
- **Database**: Supabase (PostgreSQL)
- **API Integrations**: Google Places API, OpenAI API
- **URL Structure**: City-specific, service-oriented pattern
  - Example: `/emergency-plumbing-repair-sacramento-ca`

## 3. Project Structure

- Documentation is stored in the `handyman-v2/documentation` directory
- Environment variables are stored in `.env.local` (excluded from git)
- Daily logs are maintained in [daily_log.md](cci:7://file:///c:/Users/IvoD/repos/lead-gen-handyman/daily_log.md:0:0-0:0) at the root
- Progress tracking in `documentation/tracking-progress.md`


## Development Structure (Where All Development Should Occur)

- **Root directory**: `C:\Users\IvoD\repos\lead-gen-handyman\handyman-v2`
- **Source code**: `C:\Users\IvoD\repos\lead-gen-handyman\handyman-v2\src`
- **Components**: `C:\Users\IvoD\repos\lead-gen-handyman\handyman-v2\src\components`
  - **Common components**: `C:\Users\IvoD\repos\lead-gen-handyman\handyman-v2\src\components\common`
  - **Home page components**: `C:\Users\IvoD\repos\lead-gen-handyman\handyman-v2\src\components\home`
  - **MCP-specific components**: `C:\Users\IvoD\repos\lead-gen-handyman\handyman-v2\src\components\mcp`
- **Pages**: `C:\Users\IvoD\repos\lead-gen-handyman\handyman-v2\src\pages`
- **Utilities**: `C:\Users\IvoD\repos\lead-gen-handyman\handyman-v2\src\utils`
- **Configuration**: `C:\Users\IvoD\repos\lead-gen-handyman\handyman-v2\src\config`
- **Libraries**: `C:\Users\IvoD\repos\lead-gen-handyman\handyman-v2\src\lib`
- **Scripts**: `C:\Users\IvoD\repos\lead-gen-handyman\handyman-v2\src\scripts`

This structure follows standard Next.js organization with the Pages Router pattern. All component development should be done in this structure, while only referencing (not modifying) the template files.



## 4. Command Line Best Practices

- Use PowerShell-native commands
- Use semicolons (;) instead of && for joining commands
- Example: `npx kill-port 8888 3000; npx netlify dev`
- Always set port explicitly: `yarn dev -- --port 3000`

## 5. Data Management

- Google Places API with cost optimization and caching
- Supabase for data storage and retrieval
- API keys stored securely in environment variables

## 6. UI Requirements

- All API calls must have dedicated buttons with descriptive labels
- Show loading states during operations
- Display success/error states in adjacent UI elements
- Use consistent component styling across the application